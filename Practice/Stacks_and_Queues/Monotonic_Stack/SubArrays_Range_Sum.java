package DSA_in_Java.Practice.Stacks_and_Queues.Monotonic_Stack;

import java.util.Arrays;
import java.util.Stack;

public class SubArrays_Range_Sum {
    public static long subArrayRanges(int[] nums) {
        return sum_of_subArray_maxs(nums) - sum_of_subArray_mins(nums);
    }

    private static long sum_of_subArray_mins(int[] nums) {
        int n = nums.length;
        long sum = 0;
        int[] pre_smaller_index_array = prev_Smaller_idx_func(nums);
        int[] next_smaller_index_array = next_Smaller_idx_func(nums);

        for (int i = 0; i < n; i++) {
            int prev_smaller_index = pre_smaller_index_array[i];
            int next_smaller_index = next_smaller_index_array[i];

            long no_of_elements_in_left = i - prev_smaller_index;
            long no_of_elements_in_right = next_smaller_index - i;

            long product = (no_of_elements_in_left * no_of_elements_in_right * nums[i]);
            sum = sum + product;
        }
        return sum;
    }

    private static long sum_of_subArray_maxs(int[] nums) {
        int n = nums.length;
        long sum = 0;
        int[] pre_smaller_index_array = prev_Greater_idx_func(nums);
        int[] next_smaller_index_array = next_Greater_idx_func(nums);

        for (int i = 0; i < n; i++) {
            int prev_smaller_index = pre_smaller_index_array[i];
            int next_smaller_index = next_smaller_index_array[i];

            long no_of_elements_in_left = i - prev_smaller_index;
            long no_of_elements_in_right = next_smaller_index - i;

            long product = (no_of_elements_in_left * no_of_elements_in_right * nums[i]);
            sum = sum + product;
        }
        return sum;
    }

    public static int[] prev_Smaller_idx_func(int[] arr) {
        int n = arr.length;
        Stack<Integer> stack = new Stack<>();   // Stack stores indices
        int[] pre_smaller_index_array = new int[n];
        for (int i = 0; i < n ; i++) {
            while (!stack.isEmpty() && arr[i] < arr[stack.peek()]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                pre_smaller_index_array[i] = -1;
            } else {
                pre_smaller_index_array[i] = stack.peek();
            }
            stack.push(i);
        }
        return pre_smaller_index_array;
    }

    public static int[] next_Smaller_idx_func(int[] arr) {
        int n = arr.length;
        Stack<Integer> stack = new Stack<>(); // Stack stores indices
        int[] next_smaller_index_array = new int[n];
        for (int i = n-1; i >= 0 ; i--) {
            while (!stack.isEmpty() && arr[i] <= arr[stack.peek()]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                next_smaller_index_array[i] = n;
            } else {
                next_smaller_index_array[i] = stack.peek();
            }
            stack.push(i);
        }
        return next_smaller_index_array;
    }

    public static int[] prev_Greater_idx_func(int[] arr) {
        int n = arr.length;
        Stack<Integer> stack = new Stack<>();   // Stack stores indices
        int[] pre_smaller_index_array = new int[n];
        for (int i = 0; i < n ; i++) {
            while (!stack.isEmpty() && arr[i] > arr[stack.peek()]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                pre_smaller_index_array[i] = -1;
            } else {
                pre_smaller_index_array[i] = stack.peek();
            }
            stack.push(i);
        }
        return pre_smaller_index_array;
    }

    public static int[] next_Greater_idx_func(int[] arr) {
        int n = arr.length;
        Stack<Integer> stack = new Stack<>(); // Stack stores indices
        int[] next_smaller_index_array = new int[n];
        for (int i = n-1; i >= 0 ; i--) {
            while (!stack.isEmpty() && arr[i] >= arr[stack.peek()]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                next_smaller_index_array[i] = n;
            } else {
                next_smaller_index_array[i] = stack.peek();
            }
            stack.push(i);
        }
        return next_smaller_index_array;
    }

    public static void main(String[] args) {
        int[] nums ={1,2,3};
        int[] nums2 ={1,4,3,2};
        int[] nums3 ={4,-2,-3,4,1};
        int[] nums4 ={1,3,3};
        int[] nums5 ={-31372,86677,70463,37727,-91683,-41347,-90576,-82174,-84198,-5148,-12591,-34156,49770,9666,-77075,-57678,-31101,-47531,-86306,-91337,-89507,-24917,-87692,-39171,98075,17787,-42549,34352,-70752,71832,70055,-1026,3784,2190,-36669,959,50619,97129,77088,54049,51707,72052,59230,-96834,-14048,-9619,84853,99362,69885,74086,-28737,23060,-63323,13156,-72998,94336,-75409,58266,-86800,-54564,80773,40687,-47207,43609,-56556,21192,-48024,-58907,1629,-65561,-68397,31862,-2201,-34966,43542,-59201,-3637,-21936,-93559,49435,23249,-54299,70508,-90795,-3620,-33894,43927,10208,-7390,86931,48175,81859,95058,-16614,38066,-99361,63621,-99285,-47111,29933,73901,60455,46586,-84117,35256,-89853,33383,-91662,82979,-48835,-93877,-80929,-98904,-47773,69451,85183,-14449,-51496,75765,35062,12456,35254,-16363,80792,-3414,9244,62961,-52057,56344,-50277,-26870,-63323,54993,75596,-93637,-78526,-3058,-30560,82233,-50795,-5290,-641,-83040,13524,86725,23735,29280,43938,-43995,-8992,-83717,-62090,74538,58682,-56550,-8638,61528,-87974};
        int[] nums6 ={9911,-90135,-89738,35019,-56095,-18837,-81924,96768,83709,42105,49101,-83708,29516,33928,-5479,-44214,-22153,-76747,-99356,76807,-12231,46985,-12087,21060,43150,-23670,-23204,-65344,81818,76776,30956,18479,-44424,-76224,-87457,-96291,94823,-39334,-43175,-29222,20058,-44259,-95096,14744,38890,96360,10996,70237,-22899,46971,93496,55180,32236,98831,-14677,39989,-1402,-67256,-52962,-604,62508,-68350,-12018,-17920,-54431,93459,-15339,6145,-10386,-75337,-84230,-79745,73742,-87198,-65921,-63230,-68034,60918,69939,93521,45833,-75382,38376,-8957,-44605,1517,78042,-30046,-51203,1268,64486,-88572,78765,-43640,22977,35918,-60240,-6190,-24904,66546,56998,56506,-84878,-25106,53291,25918,-73575,13181,22302,54475,-76365,-1235,-39069,8193,-35294,-24390,26334,-33051,10653,30843,-42931,-73080,74495,-58822,-89474,-58196,39872,-82220,4470,-87717,-7033,73446,30723,52996,97766,-80240,-96249,-71354,-2716,66330,-57731,-4861,77914,-75169,15435,36157,-31931,37208,31071,-77016,66022,-83770,78090,26773,-3918,-87435,-72431,12594,70775,-64570,6119,-49410,-96924,-18961,40174,-78097,73845,88870,94993,66352,-30670,65667,-47589,49699,11263,69895,-48291,-40686,-65865,96078,54011,57242,619,97356,7051,-42711,40022,-22064,-63468,-60426,-76583,-88342,71161,3485,39743,-99920,-19040,-53913,-11736,63224,-88721,35258,-41322,24492,29518,91582,-94250,-26142,-3023,90755,97269,92330,1596,-2177,-21206,72675,42519,-79034,-39951,-78073,-58455,-72284,66996,-72352,81964,73171,2110,-2433,-52821,-3283,-54448,41248,67560};
        int[] nums7 ={44100,-56253,-87825,85180,9757,38400,-79790,70906,-84011,-47443,7591,51955,82857,88601,-40488,50522,67401,52187,-95259,29098,-90134,89896,-77967,-22428,-28532,-90237,-99696,-62447,87981,-12925,7985,39797,-47714,-63656,-74771,22170,-23500,93592,-4531,84380,-6001,85246,-97211,-59961,94258,61193,5647,50267,-84298,-74537,93428,-65618,65642,13034,29918,71695,-73036,-77551,534,-89410,-48966,75211,-58026,80627,15452,36970,8639,24721,-69696,53800,-31659,57435,-48166,-20745,45691,27731,-58085,84151,68345,89265,-86124,-62665,3042,-91274,778,13232,14311,16015,-53543,66854,-71929,84591,-12147,-92987,14605,48389,-58397,-77052,93904,-18773,-25516,-41432,82123,-21665,-54708,-12475,30278,-67332,-26924,-15315,8680,49804,19357,-90558,80541,21961,-54950,91191,82745,-81144,49588,49217,54596,-618,78471,-18303,78836,48380,-34052,83040,27224,93503,94966,-53188,-96363,22665,-53675,-36581,72081,90508,-18263,-84327,86545,-11804,-3786,78317,96389,68162,-14903,-62461,-55365,-66125,-82587,-4308,93327,-76806,17561,53395,-64928,-42247,21804,47261,-32844,-24622,-45726,34754,29110,15750,38051,-12767,85394,18749,59426,-23824,-49666,-1690,24342,-31252,-3506,-63185,-92805,-16740,-51909,-80956,-28454,-59771,42745,-38088,20909,40377,54491,6580,-97200,-56717,55680,-22376,70854,65247,-12746,82514,56879,65217,-49417,5355,53319,63307,78552,49928,-21622,85397,-3109,-34472,-88532,37545,-87396,-22167,-78133,-69524,76682,-10739,-13888,-92714,57196,-99809,62781,-34925,24895,-6503,37424,75340,53525,-40106,28872,75499,42659,99828,-81267,-76421,-91194,-71986,15377,-24108,23000,9246,-87219,-46664,-39120,2680,54553,86907,-44211,37793,-52369,40984,-83117,89487,-95440,90367,94347,-35235,-31538,-38342,-65860,67173,-60069,-40497,-77873,42434,90335,22860,28309,-25074,-48919,64655,98456,-76009,-42841,94788,-1502,-8159,-33158,20468,32838,-70461,62674,-36618,-94199,-10011,-65259,-47358,84651,9074,-35506,15918,-36663,65790,78262,-72474,-87275,-9757,-4125,64710,85251,-15492,24729,53548,9289,50720,34291,-76939,-8976,84142,53871,-57634,-81699,-49082,52811,8794,-20580,-76504,90150,-83198,-32686,49607,74307,46813,-98412,-43808,58346,18950,72143,-95992,-99571,17346,2416,56359,9009,-81938,98957,-34143,-53695,-42578,-29657,-46722,31255,59060,69214,-64971,66461,-38996,-4668,-13508,-49576,24564,48014,925,79429,59323,86294,22145,64718,-10480,83072,-34638,21766,60961,67618,82348,89014,24046,-89014,18861,-30218,-7192,19708,-18537,25481,-21690,-23903,35083,34470,-29076,88710,-65080,-69025,84659};
        System.out.println(subArrayRanges(nums));
        System.out.println(subArrayRanges(nums2));
        System.out.println(subArrayRanges(nums3));
        System.out.println(subArrayRanges(nums4));
        System.out.println(subArrayRanges(nums5));
        System.out.println(subArrayRanges(nums6));
        System.out.println(subArrayRanges(nums7));
    }
}
